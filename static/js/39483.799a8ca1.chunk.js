"use strict";(self.webpackChunksc_compile=self.webpackChunksc_compile||[]).push([[39483],{39483:(e,r,t)=>{t.r(r),t.d(r,{getGeometryServiceURL:()=>a,projectGeometry:()=>g});var i=t(86560),n=t(50076),o=t(65308),l=t(71334),c=t(70414);async function a(){var e;let r,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,l=arguments.length>1?arguments[1]:void 0;if(i.A.geometryServiceUrl)return i.A.geometryServiceUrl;if(!t)throw new n.A("internal:geometry-service-url-not-configured","No geometryServiceUrl in configuration");r="portal"in t?t.portal||o.A.getDefault():t,await r.load({signal:l});const c=null===(e=r.helperServices)||void 0===e||null===(e=e.geometry)||void 0===e?void 0:e.url;if(!c)throw new n.A("internal:geometry-service-url-not-configured","No geometryServiceUrl in configuration");return c}async function g(e,r){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3?arguments[3]:void 0;const o=await a(t,i),g=new c.A({geometries:[e],outSpatialReference:r}),u=await(0,l.C)(o,g,{signal:i});if(u&&Array.isArray(u)&&1===u.length)return u[0];throw new n.A("internal:geometry-service-projection-failed","Geometry projection failed on service")}}}]);
//# sourceMappingURL=39483.799a8ca1.chunk.js.map